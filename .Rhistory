knitr::opts_chunk$set(echo = TRUE)
getwd()
install.packages("WrightMap")
install.packages("mirt")
install.packages("latticeExtra")
install.packages("ShinyItemAnalysis")
library(WrightMap)
library(mirt)
library(latticeExtra)
library(ShinyItemAnalysis)
st_data <- read.csv("toan_de1_cleaned.csv")
str(st_data)
#estimation function
M1 <- mirt(data = st_data,
model = 1,
itemtype = "Rasch")
M2 <- mirt(st_data,
model = 1,
itemtype = "2PL")
#item parameter calibration
#beta is item Difficulty
#alpha is item Discrimination, however, 1 PL model, discrimination always = 1
item_1PL <- coef(M1,
IRTpars = TRUE,
simplify = TRUE)
summary(item_1PL)
#view 6 first row of item parameter
item_1PL$items
item_2PL <- coef(M2,
IRTpars = TRUE,
simplify = TRUE)
item_2PL$items
person_2PL <- fscores(M2,
method = "WLE",
full.scores.SE = TRUE)
head(person_2PL)
write.csv(item_2PL$items, 'items_IRT_2PL.csv')
person_2PL <- fscores(M2,
method = "WLE",
full.scores.SE = TRUE)
head(person_2PL)
#fit statistic of the model
fit_2PL <- itemfit(M2, fit_stats = 'infit')
fit_2PL
write.csv(fit_2PL, 'item_irt2pl_fit.csv')
#plot ICC
plot(M2, type='trace')
itemfit(M2,
empirical.plot=5) #input item number here
itemfit(M2,
empirical.plot=1) #input item number here
plot(M2, type='infotrace',
facet_items=TRUE)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(14,23,26),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
parameter_2PL_correction$b
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
theta_2PL
parameter_2PL
parameter_2PL$b
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
parameter_2PL$b
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11, 13),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11, 12, 13),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11, 12),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
parameter_2PL
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11, 14),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
#create theta value vector
theta_2PL <- as.vector(person_2PL)
#create difficulty data frame vector
parameter_2PL <- as.data.frame(item_2PL$items)
#to have a suitable Wright Map, we need to remove outlier
#item 14, 26, 26 are too small => remove from the graph
parameter_2PL_correction <- parameter_2PL[-c(11, 14, 30),]
item.labs = rownames(parameter_2PL_correction)
#plot Wright Map
wrightMap(theta_2PL, parameter_2PL_correction$b,
item.side = itemHist, #use itemClassic/itemModern if we can show all item
item.prop = 0.5,
label.items = item.labs)
knitr::opts_chunk$set(echo = TRUE)
#CTT library is available for quick calculation of indexes
library(CTT)
#import data
data <- read.csv("toan_de1_cleaned.csv")
str(data)
#use function itemAnalysis to analyze data with CTT
#pBisFlag highlights item with pBis lower than 0.2
#easyFlag highlights easy item (Difficulty > 0.75)
#hardFlag highlights hard item (Difficulty < 0.25)
CTT_analysis <- itemAnalysis(data,
pBisFlag = 0.2,
easyFlag = 0.75)
# itemMean as Difficulty
# pBis = point-biserial, bis = biserial as Discrimination
# alphaIfDeleted = Cronbach's alpha of whole test if item removed
CTT_analysis$itemReport
#Crobach's alpha as test reliability
alpha <- CTT_analysis$alpha
alpha
st_raw_score <- rowSums(data)
SEM <- sqrt((1-alpha)*var(st_raw_score))
SEM
ci <- 95/100 #confidence interval is 95%
Z <- qnorm((ci+1)/2)
Z
st_T_low <- st_raw_score - SEM*Z
st_T_high <- st_raw_score + SEM*Z
st_score <- cbind(st_raw_score,st_T_low,st_T_high)
head(st_score)
write.csv(CTT_analysis$itemReport, 'item_ctt_coef.csv')
